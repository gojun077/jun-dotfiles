# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "moonphase/amazonlinux2"
  config.vm.hostname = 'front-phnx'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = true

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  #config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  # http nginx
  config.vm.network :forwarded_port, guest: 80, host: 8080
  # https nginx
  config.vm.network :forwarded_port, guest: 443, host: 4430
  # for https://local.whalex.co.kr:3000/
  config.vm.network :forwarded_port, guest: 3000, host: 3000
  # for webpack dev server https://local.whalex.co.kr:3001
  config.vm.network :forwarded_port, guest:3001, host: 3001

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network", bridge: "enp6s0", ip: "192.168.26.244", netmask: "255.255.255.0"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    # Customize the amount of memory on the VM:
    vb.memory = "4096"
    vb.cpus = 2
    vb.customize ["modifyvm", :id, "--name", "front-phnx"]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.

  config.vm.provision "shell", inline: <<-SHELL
    yum update -y
    if ! [[ -f node-v8.11.4-linux-x64.tar.xz ]]; then
      export HM="/home/vagrant"
      wget https://nodejs.org/dist/v8.11.4/node-v8.11.4-linux-x64.tar.xz
      tar -xvf node-v8.11.4-linux-x64.tar.xz
      ln -s $HM/node-v8.11.4-linux-x64/lib/node_modules /usr/local/lib
      ln -s $HM/node-v8.11.4-linux-x64/bin/node /usr/bin/
      ln -s $HM/node-v8.11.4-linux-x64/lib/node_modules/npm/bin/npm-cli.js \
          /usr/local/bin/npm
      ln -s $HM/node-v8.11.4-linux-x64/lib/node_modules/npm/bin/npx-cli.js \
          /usr/local/bin/npx
    fi

    if ! [ rpm -q epel-release ]; then
      wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -P /tmp
      yum install -y /tmp/epel-release-latest-7.noarch.rpm
    fi

    if ! [ rpm -q nginx ]; then
      yum install -y nginx
    fi
  SHELL
end
