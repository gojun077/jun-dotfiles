; -*- mode: emacs-lisp -*-

;; My .emacs for Asahilinux Fedora Remix
;; Created on: 02 May 2024
;; Created by: gopeterjun@naver.com
;; Last Updated: Mon 21 Jul 2025
;;
;; These configs are for Emacs 30.1 and higher.
;;; Code:


;; ensure latest org version is loaded by straight.el
(straight-use-package 'org)
;; Install use-package
(straight-use-package 'use-package)

(use-package ansible
  :straight t
  :defer t)
(use-package blacken
  :straight t
  :defer t)
(use-package browse-kill-ring
  :straight t)
(use-package emojify
  :straight t
  :defer t)
(use-package exec-path-from-shell
  :straight t)
(use-package flymake-hadolint
  :straight t
  :defer t)
(use-package flymake-ruff
  :straight t)
(use-package flymake-yamllint
  :straight t
  :defer t)
(use-package go-mode
  :straight t
  :hook (go-mode . go-mode-setup)
  :defer t)
(use-package gptel
  :straight t)
(use-package go-playground
  :straight t
  :defer t)
(use-package hcl-mode
  :straight t
  :defer t)
(use-package jenkinsfile-mode
  :straight t
  :defer t)
(use-package leuven-theme
  :straight t)
(use-package magit
  :straight t
  :defer t)
(use-package markdown-mode
  :straight t
  :defer t)
;; mcp.el
(use-package mcp
  :straight (:host github :repo "lizqwerscott/mcp.el")
  :config
  (require 'mcp-hub))
(use-package nix-mode
  :straight t
  :defer t)
(use-package ob-mermaid
  :straight t
  :defer t
  :config
  (setq ob-mermaid-cli-path "/home/jundora/.nix-profile/bin/mmdc"))
(use-package org
  :straight t
  :config
  (require 'org-protocol)
  (require 'ox-md)
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (java . t)
      (js . t)
      (latex . t)
      (python . t)
      (ruby . t)
      (shell . t)
      (C . t)
      (mermaid . t))))
(use-package org-roam
  :straight t
  :defer t)
; use my fork of org-trello
(use-package org-trello
  :straight (:host github
             :repo "gojun077/org-trello"
             :branch "move-board-on-refile"
             :build (:not compile)))
;; Projectile for project management
(use-package projectile
  :straight t
  :init
  (projectile-mode +1)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (setq projectile-project-search-path '("~/Documents/repos")))
(use-package racket-mode
  :straight t
  :defer t
  :hook ((racket-mode . rainbow-delimiters-mode)
         (racket-mode . smartparens-mode)))
(use-package rainbow-delimiters
  :straight t)
(use-package sicp
  :straight t
  :defer t)
(use-package smartparens
  :straight t)
(use-package solarized-theme
  :straight t
  :defer t)
(use-package tex
  :straight auctex
  :defer t)
(use-package unicode-whitespace
  :straight t)
(use-package visual-fill-column
  :straight t)
(use-package web-mode
  :straight t
  :defer t)
(use-package xclip
  :straight t)
(use-package yaml-mode
  :straight t
  :hook ((yaml-mode . flymake-yamllint-setup)
         (yaml-mode . flymake-mode))
  :defer t)

;;
;; use-package block for Consult+Vertico ;;
;;
;; Setup Vertico for enhanced minibuffer completion
(use-package vertico
  :straight t
  :init
  (vertico-mode))
;; Optional but recommended with Vertico
(use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
;; Marginalia for annotations in the minibuffer
(use-package marginalia
  :straight t
  :init
  (marginalia-mode))
;; Consult for enhanced search commands
(use-package consult
  :straight t
  :bind (("C-s" . consult-line)
         ("C-c h" . consult-ripgrep)
         ("C-c f" . consult-find)
         ("C-c o" . consult-outline)
         ;; Replace some projectile commands with consult equivalents
         :map projectile-command-map
         ("s r" . consult-ripgrep)
         ("s s" . consult-git-grep)))

(require 'exec-path-from-shell)
(require 'browse-kill-ring)
(require 'flymake-ruff)
(require 'nix-mode)
(require 'smartparens-config)
(require 'unicode-whitespace)
(require 'whitespace)


;;; GPTel specific configurations ;;;
;;
(setq gptel-default-mode 'org-mode)

;; Configure Anthropic Claude
; API key will be read from '~/.authinfo.gpg'
(gptel-make-anthropic "Claude"
  :stream t
  :key gptel-api-key)

;; Configure Google Gemini
; API key will be read from '~/.authinfo.gpg'
(gptel-make-gemini "Gemini"
  :stream t
  :key gptel-api-key
  :models '(gemini-2.5-pro))

;; Configure Deepseek
; API key will be read from '~/.authinfo.gpg'
(gptel-make-deepseek "DeepSeek"
  :stream t
  :key gptel-api-key)

;; Configure Github Copilot Chat
; no API key; browser auth login required
(gptel-make-gh-copilot "Copilot")

;; Configure xAI Grok
; API key will be read from '~/.authinfo.gpg'
(gptel-make-xai "xAI"
  :stream t
  :key gptel-api-key
  :models '(grok-4-0709))

;; Configure Alibaba Qwen3
; API key will be read from '~/.authinfo.gpg'
(gptel-make-openai "Alibaba"
  :stream t
  :key gptel-api-key
  :protocol "https"
  :host "dashscope-intl.aliyuncs.com"
  :endpoint "/compatible-mode/v1/chat/completions"
  :models '(qwen3-coder-plus))

;; from https://github.com/karthink/gptel?tab=readme-ov-file#defining-gptel-tools
(gptel-make-tool
 :name "read_buffer"                    ; javascript-style snake_case name
 :function (lambda (buffer)                  ; the function that will run
             (unless (buffer-live-p (get-buffer buffer))
               (error "error: buffer %s is not live." buffer))
             (with-current-buffer  buffer
               (buffer-substring-no-properties (point-min) (point-max))))
 :description "[READ-ONLY] Return the contents of an emacs buffer. Use this to examine buffer content before making modifications. For targeted analysis, prefer show_buffer_context."
 :args (list '(:name "buffer"
               :type string            ; :type value must be a symbol
               :description "the name of the buffer whose contents are to be retrieved"))
 :category "emacs")                     ; An arbitrary label for grouping

(gptel-make-tool
 :name "modify_buffer"
 :function (lambda (buffer operation &optional text start-line end-line position)
             (condition-case err
                 (with-current-buffer (get-buffer-create buffer)
                   (save-excursion
                     (let ((total-lines (count-lines (point-min) (point-max))))
                       (cond
                        ((string= operation "insert")
                         (cond
                          ;; Insert at end if no line specified
                          ((not start-line)
                           (goto-char (point-max))
                           (unless (bolp) (insert "\n"))
                           (insert text)
                           (format "Inserted text at end of buffer %s" buffer))
                          ;; Validate line number
                          ((or (< start-line 1) (> start-line (1+ total-lines)))
                           (format "Error: Line %d is out of range (1-%d) in buffer %s" start-line (1+ total-lines) buffer))
                          ;; Smart insert with syntax checking
                          (t
                          (goto-char (point-min))
                          (forward-line (1- start-line))

                          ;; Check for incomplete code blocks before inserting
                          (let ((current-line (string-trim (thing-at-point 'line t)))
                                (prev-line (save-excursion
                                               (forward-line -1)
                                               (string-trim (thing-at-point 'line t))))
                                  (insertion-safe t)
                                  (warning-msg ""))

                              ;; Check for shell script case statement patterns
                              (when (and current-line prev-line)
                                (cond
                                 ;; Warn if inserting between a case pattern and its ;;
                                 ((and (string-match ")\\s-*$" prev-line)
                                       (not (string-match ";;" prev-line))
                                       (not (string-match ";;" current-line)))
                                  (setq warning-msg (format "Warning: Inserting between case pattern '%s' and its closing ';;' may break syntax. " (string-trim prev-line)))
                                  (setq insertion-safe nil))
                                 ;; Warn if current line looks like incomplete statement
                                 ((and (string-match "\\(if\\|while\\|for\\|case\\)\\s-" current-line)
                                       (not (string-match ";;\\s-*$" current-line)))
                                  (setq warning-msg (format "Warning: Line %d appears to be an incomplete statement: '%s'. " start-line (string-trim current-line))))))

                              ;; Perform insertion with automatic indentation
                              (let ((target-indent (save-excursion
                                                  (beginning-of-line)
                                                    (skip-chars-forward " \t")
                                                       (current-column)))
                                     (formatted-text (if (string-match "^[ \t]" text)
                                                         text  ; Text already has indentation
                                                       (mapconcat (lambda (line)
                                                                    (if (string-empty-p (string-trim line))
                                                                        line  ; Keep empty lines as-is
                                                                      (concat (make-string target-indent ?\s) line)))
                                                                  (split-string text "\n")
                                                                  "\n"))))
                                 (if (string= position "after")
                                     (progn (end-of-line) (insert "\n" formatted-text))
                                   (progn (beginning-of-line) (insert formatted-text "\n"))))

                              (format "%sInserted text %s line %d in buffer %s"
                                      warning-msg
                                      (or position "before")
                                      start-line
                                      buffer)))))

                        ((string= operation "replace")
                         (cond
                          ((not (and start-line end-line text))
                           "Error: Replace operation requires start-line, end-line, and text parameters")
                          ((or (< start-line 1) (> end-line total-lines) (> start-line end-line))
                           (format "Error: Invalid line range %d-%d (total lines: %d)" start-line end-line total-lines))
                          (t
                           (goto-char (point-min))
                           (forward-line (1- start-line))
                           (let ((start-pos (point)))
                             (forward-line (- end-line start-line))
                             (end-of-line)
                             (delete-region start-pos (point))
                             (insert text))
                           (format "Replaced lines %d-%d in buffer %s" start-line end-line buffer))))

                        ((string= operation "delete")
                         (cond
                          ((not (and start-line end-line))
                           "Error: Delete operation requires start-line and end-line parameters")
                          ((or (< start-line 1) (> end-line total-lines) (> start-line end-line))
                           (format "Error: Invalid line range %d-%d (total lines: %d)" start-line end-line total-lines))
                          (t
                           (goto-char (point-min))
                           (forward-line (1- start-line))
                           (let ((start-pos (point)))
                             (forward-line (- end-line start-line))
                             (end-of-line)
                             (when (< (point) (point-max)) (forward-char 1))
                             (delete-region start-pos (point)))
                           (format "Deleted lines %d-%d in buffer %s" start-line end-line buffer))))

                        (t (format "Error: Unknown operation '%s'. Use 'insert', 'replace', or 'delete'" operation))))))
               (error (format "Error in modify_buffer: %s" (error-message-string err)))))
 :description "[STEP 3 of 4] Modify an Emacs buffer by inserting, replacing, or deleting text at specific lines. Use this AFTER search_buffer_text (step 1) and show_buffer_context (step 2), then follow with save_buffer (step 4). IMPORTANT: 1) Only add NEW content that doesn't already exist. 2) Indentation is automatically matched to surrounding code. 3) Don't break syntax - avoid inserting between incomplete code blocks. 4) Based on context analysis, choose safe insertion boundaries."
 :args (list '(:name "buffer"
               :type "string"
               :description "The name of the buffer to modify.")
             '(:name "operation"
               :type "string"
               :description "Operation: 'insert', 'replace', or 'delete'.")
             '(:name "text"
               :type "string"
               :description "Text to insert/replace (not used for delete).")
             '(:name "start-line"
               :type "number"
               :description "Line number (1-based). For insert: target line. For replace/delete: start of range.")
             '(:name "end-line"
               :type "number"
               :description "End line number (1-based). Required for replace/delete operations.")
             '(:name "position"
               :type "string"
               :description "For insert only: 'before' (default) or 'after' the specified line."))
 :category "emacs")

(gptel-make-tool
 :name "show_buffer_context"
 :function (lambda (buffer line-number &optional context-lines)
             (condition-case err
                 (with-current-buffer (get-buffer buffer)
                   (save-excursion
                     (let* ((context-size (or context-lines 5))
                            (total-lines (count-lines (point-min) (point-max)))
                            (start-line (max 1 (- line-number context-size)))
                            (end-line (min total-lines (+ line-number context-size)))
                            (lines '()))
                       (goto-char (point-min))
                       (forward-line (1- start-line))
                       (dotimes (i (1+ (- end-line start-line)))
                         (let ((current-line-num (+ start-line i))
                               (line-content (string-trim (thing-at-point 'line t))))
                           (push (format "%s%d: %s"
                                        (if (= current-line-num line-number) ">>> " "    ")
                                        current-line-num
                                        line-content) lines))
                         (forward-line 1))
                       (format "Context around line %d in buffer '%s' (lines %d-%d of %d):\n%s"
                               line-number buffer start-line end-line total-lines
                               (mapconcat 'identity (nreverse lines) "\n")))))
               (error (format "Error showing context: %s" (error-message-string err)))))
 :description "[STEP 2 of 4] Show the context around a specific line in a buffer to analyze code structure, indentation, and existing content. Use this AFTER search_buffer_text (step 1) and BEFORE modify_buffer (step 3) to choose the optimal insertion point and understand proper indentation."
 :args (list '(:name "buffer"
               :type "string"
               :description "The name of the buffer to examine.")
             '(:name "line-number"
               :type "number"
               :description "The line number to show context around (1-based).")
             '(:name "context-lines"
               :type "number"
               :description "Number of lines before and after to show (default: 5)."))
 :category "emacs")

(gptel-make-tool
 :name "search_buffer_text"
 :function (lambda (buffer search-text)
             (condition-case err
                 (with-current-buffer (get-buffer buffer)
                   (save-excursion
                     (goto-char (point-min))
                     (let ((matches '()))
                       (while (search-forward search-text nil t)
                         (let ((line-num (line-number-at-pos))
                               (line-content (string-trim (thing-at-point 'line t))))
                           (push (format "Line %d: %s" line-num line-content) matches)))
                       (if matches
                           (format "Found %d occurrences of '%s' in buffer '%s':\n%s"
                                   (length matches) search-text buffer
                                   (mapconcat 'identity (nreverse matches) "\n"))
                         (format "Text '%s' not found in buffer '%s'" search-text buffer)))))
               (error (format "Error searching buffer: %s" (error-message-string err)))))
 :description "[STEP 1 of 4] Search for existing text in a buffer to avoid creating duplicates. Use this FIRST before any modifications to check if similar code already exists. Follow with show_buffer_context (step 2), modify_buffer (step 3), then save_buffer (step 4)."
 :args (list '(:name "buffer"
               :type "string"
               :description "The name of the buffer to search in.")
             '(:name "search-text"
               :type "string"
               :description "The text to search for (e.g., a function name or key phrase)."))
 :category "emacs")

(gptel-make-tool
 :name "save_buffer"
 :function (lambda (buffer)
             (condition-case err
                 (with-current-buffer (get-buffer buffer)
                   (if (buffer-file-name)
                       (progn
                         (save-buffer)
                         (format "Saved buffer '%s' to file: %s" buffer (buffer-file-name)))
                     (format "Buffer '%s' is not associated with a file. Use write-file to save it." buffer)))
               (error (format "Error saving buffer: %s" (error-message-string err)))))
 :description "[STEP 4 - SAVE] Save buffer changes to file. Use this AFTER modify_buffer (step 3) to persist your changes to disk. Always save after making modifications unless you plan to make multiple changes first."
 :args (list '(:name "buffer"
               :type "string"
               :description "The name of the buffer to save."))
 :category "emacs")

(gptel-make-tool
 :name "read_file"
 :description "[READ-ONLY] Open a file in Emacs and return its contents. Use this to examine file content before making modifications."
 :args (list '(:name "path" :type string :description "Path to the file (e.g. ~/notes/todo.txt)"))
 :function (lambda (path)
             (condition-case err
                 (with-current-buffer (find-file-noselect path)
                   (buffer-string))
               (error (format "Error reading file '%s': %s" path (error-message-string err)))))
 :category "filesystem")

(gptel-make-tool
 :name "execute_safe_command"
 :function (lambda (command)
             (condition-case err
                 (let* ((temp-buffer (generate-new-buffer " *shell-output*"))
                        (exit-code (call-process-shell-command command nil temp-buffer t))
                        (output (with-current-buffer temp-buffer (buffer-string))))
                   (kill-buffer temp-buffer)
                   (let ((trimmed-output (string-trim output)))
                     (format "```bash\n%s\n```\n\n**Exit code:** %d\n\n**Output:**\n```\n%s\n```"
                     command exit-code
                     (if (string-empty-p trimmed-output)
                     "(no output)"
                     trimmed-output))))
               (error (format "Command: %s\nError: %s" command (error-message-string err)))))
 :description "Run a shell command safely and return both the command you used and its output."
 :args (list '(:name "command"
               :type "string"
               :description "The shell command to execute"))
 :category "shell")


(gptel-make-tool
 :name "check_parens"
 :function (lambda (buffer)
             (condition-case err
                 (with-current-buffer (get-buffer buffer)
                   (unless (buffer-live-p (get-buffer buffer))
                     (error "Buffer '%s' is not live." buffer))
                   (save-excursion
                     (check-parens))
                   ;; If check-parens succeeds, it returns nil.
                   ;; A successful execution of the body means we can return a success message.
                   (format "Parentheses and expressions are balanced in buffer '%s'." buffer))
               (error (format "Unbalanced parentheses detected in buffer '%s': %s"
                              buffer (error-message-string err)))))
 :description "Checks the specified buffer for unbalanced parentheses. This function verifies that all parentheses, brackets, and quotes are correctly matched according to the buffer's syntax rules. It returns a success message if balanced, or an error if an imbalance is found."
 :args (list '(:name "buffer"
               :type "string"
               :description "The name of the buffer to check."))
 :category "emacs")


(gptel-make-tool
 :name "byte_compile_file"
 :description "Byte-compile an Emacs Lisp file to check for syntax errors. Returns a success message or the compilation log on failure."
 :args (list '(:name "filename" :type "string" :description "The path to the Emacs Lisp file to compile."))
 :function (lambda (filename)
             (condition-case err
                 (progn
                   (unless (file-exists-p filename)
                     (error "File not found: %s" filename))
                   ;; Ensure the compilation log is clear before starting
                   (with-current-buffer (get-buffer-create "*Compile-Log*")
                     (erase-buffer))
                   (if (byte-compile-file filename)
                       (format "Successfully compiled '%s' with no errors." filename)
                     ;; If compilation fails, return the log
                     (let ((log-output (with-current-buffer (get-buffer "*Compile-Log*")
                                         (buffer-string))))
                       (format "Compilation of '%s' failed. Errors:\n%s" filename log-output))))
               (error (format "An error occurred while trying to compile '%s': %s"
                              filename (error-message-string err)))))
 :category "emacs")

;; GPTel config block end

;;; mcp configs for mcp.el ;;;
;;
(setq mcp-hub-servers
      ;; https://github.com/modelcontextprotocol/servers/blob/main/src/filesystem
      '(("filesystem" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-filesystem" "~/")))))

(require 'gptel-integrations)
;; MCP config block end

;; map M-y yank-pop to browse-kill-ring
(browse-kill-ring-default-keybindings)
(add-hook 'elisp-lisp-mode-hook #'flymake-mode)
(add-hook 'python-base-mode-hook (lambda ()
                                   (flymake-mode 1)
                                   (blacken-mode 1)))

;; make #! script files executable on save (chmod +x)
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(add-hook 'sh-mode-hook #'flymake-mode)

;; Capitalize keywords in SQL mode
(add-hook 'sql-mode-hook 'sqlup-mode)
;; Capitalize keywords in an interactive session (e.g. psql)
(add-hook 'sql-interactive-mode-hook 'sqlup-mode)
;; truncate long lines in sqli mode
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))

(defun go-mode-setup ()
  ;; run 'go fmt' on .go source files before save
  (add-hook 'before-save-hook 'gofmt-before-save)
  ;; customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "env GOOS=linux GOARCH=arm64 go build -v -o bin/$(basename $(pwd)) && go test -v && go vet"))
)

;; cc-mode settings
; Note K&R style uses spaces for indentation
(setq c-default-style "k&r"
      c-basic-offset 4)
(add-hook 'c-mode-hook #'flymake-mode)

;; java-mode settings
;; use checkstyle linter offsets
(add-hook 'java-mode-hook
             (lambda ()
               (setq c-basic-offset 2)))

;; mode settings
; show col and line numbers
(column-number-mode 1)
; highlight parens
(show-paren-mode t)


;;=========================
;;   CUSTOM MENU OPTIONS
;;=========================

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files
   '("~/Documents/repos/encrypted/gpj-org-mode-files/next_actions.org"))
 '(org-trello-current-prefix-keybinding "C-c o" nil (org-trello))
 '(orgtrello-log-level 4 nil (org-trello))
 '(package-selected-packages
   '(flymake-ruff go-mode org-trello yaml-mode web-mode go-playground
                  unicode-whitespace smartparens ansible rainbow-delimiters
                  racket-mode markdown-mode magit exec-path-from-shell))
 '(pdf-latex-command "xetex")
 '(python-shell-completion-native-disabled-interpreters '("pypy ipython3"))
 '(warning-suppress-types '((comp))))


;;======================
;;   GLOBAL VARIABLES
;;======================

; start emacs in server mode
(server-mode 1)
; ensure GPG password input is handled by emacs during emacs session
;(setenv "GPG_AGENT_INFO" nil)

; specify UTF-8 encoding for all buffers
(setq set-language-environment "UTF-8")
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)
; But when I must use TAB, set width to 2 chars
(setq-default tab-width 2)
; shell script mode formatting
(setq sh-basic-offset 2)
(setq sh-indentation 2)
; Python settings
; Note: recent versions of ipython and python interpreters
; don't support readline() and doctests do not show up
; in the emacs inferior process running python/ipython.
; For the time being, run python from CLI as follows:
;
; python -m doctest myprog.py -v
;
(setq python-shell-completion-native nil)
(setq python-shell-interpreter "ipython3"
      python-shell-interpreter-args "--simple-prompt -i --InteractiveShell.display_page=True")
(setq ansi-color-for-comint-mode t)
(setq python-check-command "/usr/bin/ruff")
(setq python-flymake-command '("ruff"
                               "--quiet"
                               "--stdin-filename=stdin"
                               "-"))

; C-\ language toggle
(setq default-input-method "korean-hangul")
; Start emacs maximized
(setq initial-frame-alist (quote ((fullscreen . maximized))))
; create backups in $HOME/tmp
; bkup files will have '!' in place of directory separator '/'
(setq backup-directory-alist '(("" . "~/tmp")))
; Enable temp files and autosaving
(setq make-backup-files t)
; use Pandoc as default renderer for markdown
(setq markdown-command "/usr/bin/pandoc")
(setq auto-save-default t)
; Enable C-l, C-u change region to lower/upper case
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

; use xetex to render pdf from LaTeX
(setq TeX-engine 'xetex)

; enable copy-paste to and from system clipboard in emacs nw mode
; https://discourse.doomemacs.org/t/how-to-copy-in-wayland/4041/16
(setq xclip-program "wl-copy")
(setq xclip-select-enable-clipboard t)
(setq xclip-mode t)
; copy from emacs -nw terminal session to system clipboard
(setq xclip-method (quote wl-copy))

;------------------------------------------------------------
; org-mode settings
;------------------------------------------------------------
(setq org-directory "~/Documents/repos/personal/org")
(setq org-timer-default-timer 25)
; play sound when org-timer completes
(add-hook 'org-timer-done-hook (lambda () (interactive)
                                 (shell-command "/usr/bin/aplay $HOME/Downloads/media/ShipsBell.wav")))
(setq org-todo-keywords
      '((sequence "TODO(t!)" "Anywhere(!)" "Read/Review(!)" "Calls(!)"
                  "Computer(!)" "Errands(!)" "Home(!)" "Office(!)" "|"
                  "DONE(d!)")
        (sequence "|" "Canceled(c@)")))

; add timestamp CLOSED: '<YYYY-MM-DD DoW HH:MM>' for DONE status
(setq org-log-done 'time)

;; org-export settings
; see https://orgmode.org/manual/Export-Settings.html
(setq org-export-with-clocks t)
(setq org-export-with-drawers t)

; add 'CREATED: [timestamp]' when new TODO state is changed
(add-hook 'org-after-todo-state-change-hook
          (lambda ()
            (save-excursion
              (org-back-to-heading)
              (let ((text (buffer-substring (point) (progn (outline-next-heading) (point)))))
                (if (string-match "CREATED: " text)
                    ;; if string was found, noop
                    nil
                  ;; else, (1) move cursor back to current heading
                  (outline-previous-heading)
                  ;;(end-of-line)
                  ;; (2) insert timestamp on next line
                  (forward-line 1)
                  (insert (concat "CREATED: "
                      (format-time-string "[%Y-%m-%d %a %H:%M]"
                                          (current-time))
                      "\n")))))))

(setq org-refile-targets
      '(("~/Documents/repos/encrypted/gpj-org-mode-files/next_actions.org" :maxlevel . 1)
        ("~/Documents/repos/encrypted/gpj-org-mode-files/projects.org" :level . 1)
        ("~/Documents/repos/encrypted/gpj-org-mode-files/waiting_for.org" :level . 1)
        ("~/Documents/repos/encrypted/gpj-org-mode-files/someday_maybe.org" :level . 1)
        ("~/Documents/repos/encrypted/gpj-org-mode-files/closed_cards.org" :level . 1)))
(setq org-default-notes-file (concat org-directory "/capture.org"))
(setq org-capture-templates
      '(("t" "Todo" entry (file "")
         "** %a %?\n %i\n")
        ("w" "Web site" entry (file "")
         "** %a :website:\n\n%U %?\n\n%:initial")))
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-timestamp-if-done t)
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
(global-set-key (kbd "C-c i g c") #'org-id-get-create)
(setq org-id-link-to-org-use-id 'create-if-interactive)




; org-roam minor mode settings
(setq org-roam-directory (file-truename
                          "~/Documents/repos/personal/pj-org-roam"))
(org-roam-db-autosync-mode)
; Note: You are prompted for a node name when you open the
; org-roam capture template - this name will be the filename
(setq org-roam-capture-templates
 '(("p" "permanent" plain
    "%?"
    :target (file+head "permanent/${slug}.org"
                       "#+title: ${title}\n")
    :immediate-finish t
    :unnarrowed t)
   ("l" "literature" plain
    "\n* Source\n\nAuthor: %^{Author}\nTitle: %^{title}\nOoK Index: \nYear: %^{Year}\nPages: \nPublisher: \n\n* Summary\n\n%?"
    :target (file+head "literature/${slug}.org"
                       "#+title: ${title}\n")
    :immediate-finish t
    :unnarrowed t)))
(global-set-key (kbd "C-c n c") #'org-roam-capture)
; the following shortcut only works in org-mode
(define-key org-mode-map (kbd "C-c n i") #'org-roam-node-insert)


; AUCTeX settings
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook #'flymake-mode)
; AUCTEX preview-latex font
(set-default 'preview-scale-function 1.2)

; bind 'M-x magit-status' to 'C-x g'
(global-set-key (kbd "C-x g") 'magit-status)

;; leuven-theme specific settings
;; https://github.com/fniessen/emacs-leuven-theme
(setq leuven-scale-outline-headlines 1.2)
(setq leuven-scale-org-agenda-structure 1.2)
(setq leuven-scale-org-document-title 1.5)
(setq leuven-scale-volatile-highlight 1.2)

;; https://github.com/purcell/exec-path-from-shell/blob/master/README.md
(dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG"
               "LC_CTYPE" "LC_TYPE" "GOPATH" "GOROOT" "SHELL"))
  (add-to-list 'exec-path-from-shell-variables var))
; don't invoke an interactive shell; default args are ("-l" "-i")
(setq exec-path-from-shell-arguments nil)
(setq zoneinfo-style-world-list
      '(("Pacific/Honolulu" "Honolulu")
        ("America/Los_Angeles" "Seattle")
        ("America/New_York" "New York")
        ("Europe/London" "London")
        ("Europe/Paris" "Paris")
        ("Europe/Sofia" "Sofia")
        ("Asia/Dhaka" "Dhaka")
        ("Asia/Ho_Chi_Minh" "Ho_Chi_Minh")
        ("Asia/Manila" "Manila")
        ("Asia/Seoul" "Seoul")))

; Commands to run when Emacs launched in graphical mode
(when (or (display-graphic-p) (daemonp))
  ; only run whitespace mode in graphical session
  (global-whitespace-mode 1)
  ; limit line length
  (setq whitespace-line-column 80)
  ; set fill column to 75
  (setq-default fill-column 75)
  ; enable native fill column indicator (emacs 27+)
  (global-display-fill-column-indicator-mode 1)
  ; enable whitespace-mode for all files
  (add-hook 'after-change-major-mode-hook 'whitespace-mode)
  (add-hook 'markdown-mode-hook 'emojify-mode)
  ; unicode-whitespace face settings
  (unicode-whitespace-setup 'subdued-faces)
  ; don't show scrollbar
  (scroll-bar-mode -1)
  ; don't show toolbar
  (tool-bar-mode -1)
  ; focus follows mouse within emacs
  (setq mouse-autoselect-window t)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; Emacs color themes
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;(load-theme 'cyberpunk t)
  (load-theme 'leuven t)
  ;(load-theme 'sanityinc-tomorrow-blue)
  ;(load-theme 'sanityinc-tomorrow-bright)
  ;(load-theme 'sanityinc-tomorrow-day)
  ;(load-theme 'sanityinc-tomorrow-night)
  ;(load-theme 'sanityinc-solarized-light)
  ;(load-theme 'sanityinc-solarized-light-high-contrast)
  ;(load-theme 'solarized-light-high-contrast)
  (exec-path-from-shell-initialize)
)

;; Commands to run when Emacs launched in terminal mode
(unless (display-graphic-p)
  (load-theme 'adwaita t)
  (exec-path-from-shell-initialize))

;; Font settings - note that this must be set *after* (load-theme)
;; to avoid conflicts with the theme

(let ((default-font "MonofurNerdFontMono")
      (korean-font "NanumGothic"))

  ;; Set default font
  (set-face-attribute 'default nil
                      :family default-font
                      :height 150)

  ;; Set Korean font
  (set-fontset-font t 'hangul (font-spec :family korean-font))

  ;; Set mode-line font
  (if (facep 'mode-line-active)
      (set-face-attribute 'mode-line-active nil
                          :family default-font
                          :height 110)
      (set-face-attribute 'mode-line nil
                          :family default-font
                          :height 110))
  (set-face-attribute 'mode-line-inactive nil
                      :family default-font
                      :height 110)

  ;; Create a custom face for the minibuffer
  (defface my-minibuffer-face
    '((t :inherit default))
    "Face for Minibuffer")

  ;; Set the Minibuffer font size
  (set-face-attribute 'my-minibuffer-face nil
                      :family default-font
                      :height 120))

;; Apply the custom face to the minibuffer
(add-hook 'minibuffer-setup-hook
          (lambda ()
            (face-remap-add-relative 'default 'my-minibuffer-face)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; font names on Linux 'MonofurNerdFontMono', 'FiraMono'


(provide 'emacs)
;;; emacs ends here
(put 'dired-find-alternate-file 'disabled nil)
